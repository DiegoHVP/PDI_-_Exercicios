:source-highlighter: pygments
:stem:
:toc:
:icons: font

= Processamento digital de imagens
Diêgo Henrique Viana Pereira <diego.henrique.706@ufrn.edu.br>

:sectnums:
== Introdução

Este site se destina a apresentação da solução dos exercícios propostos na disciplina de Processamento Digital de Imagens (DCA0445) disponibilizado pelo Departamento de Engenharia de Computação e Automação da UFRN e ministrado pelo professor Agostinho Brito, cujo curso se encontra disponível em <https://agostinhobritojr.github.io/tutorial/pdi/>.
Todos os exercícios a seguir foram desenvolvidos em C++, juntamente com a biblioteca OpenCV <https://opencv.org/>, compilados usando o _Makefile_ disponibilizado no site do curso.


== Primeiros passos
Para compilar e executar os códigos precisamos usar os seguintes comandos:
crie uma arquivo com um nome qualquer e adicione o codigo desejado, na mesma pasta crie um outro arquivo chamado CMakeLists.txt e adicione o seguinte codigos:  

[source,cmake]
----
cmake_minimum_required(VERSION 3.0.0)
project(<nome_do_arquivo_do_codigo> VERSION 0.1.0 LANGUAGES C CXX)

find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})

add_executable(<nome_do_arquivo_do_codigo> <nome_do_arquivo_do_codigo>.cpp)
target_link_libraries(<nome_do_arquivo_do_codigo> ${OpenCV_LIBS})
----

Feito isso, basta executar no terminal:
[source,bash]
----
$ mkdir build
$ cd build
$ CMakeLists ..
$ make
----
Assim você tera um executavel do codigo.


== Capitulo 2 - Manipulando pixels em uma imagem
Neste tópico vemos como abrir e exibir uma imagem, além de acessar e modificar seus pixels, usando as ferramentas acima.

=== Exercício *_Regiões_*

Usando `U1/CH2 - Manipulando pixels em uma imagem/negativo/regioes.cpp` como referência, foi implementado um algorítmo que recebe uma imagem (passando-a para escala de cinza) e inverte as cores de uma região definida pelas coordenadas de dois pontos.


[source,cpp]
----
include::U1/CH2 - Manipulando pixels em uma imagem/negativo/regioes.cpp[]
----


[#img-regioes]
.Resultado da execução do programa regions.cpp 
image::U1/CH2 - Manipulando pixels em uma imagem/negativo/result/resultado.png[Resultado]

=== Exercício *_Troca de regiões_*

Neste tópico foi implementado um programa que troca as regiões da imagem (convertida em tons de cinza) fornecida. Nesse exemplo foi explorado o uso de uma função disponível no OpenCV para extrair regiões de uma imagem e outra que permite a cópia de uma Matriz em outra.

[source,cpp]
----
include::U1/CH2 - Manipulando pixels em uma imagem/trocaRegioes/trocaRegioes.cpp[]
----

[#img-trocaregioes]
.Resultado da execução do programa trocaregioes.cpp
image::U1/CH2 - Manipulando pixels em uma imagem/trocaRegioes/lena.png[Resultado]




== Capitulo 5 - Serializacao de dados em ponto flutuante via FileStorage

Nesta seção, abordamos o tópico 'Serializacao de dados em ponto flutuante via FileStorage', explorando conceitos e implementações relacionados a ele. Abaixo estão os exercícios e resultados obtidos.


[source,cpp]
----
include::./U1/CH5 - Serializacao de dados em ponto flutuante via FileStorage/senoide.cpp[]
----
[#img-senoide-256]
image::./U1/CH5 - Serializacao de dados em ponto flutuante via FileStorage/build/senoide-256.png[Resultado]

[#img-download]
image::./U1/CH5 - Serializacao de dados em ponto flutuante via FileStorage/Grafico de diferenca/download.png[Resultado]

== Capitulo 10 - Decomposição de imagen em plano de bits

Neste tópico vemos como abrir pegar uma imagem e embutir em outra, isso é possivel a unidade usada para representação de cores (unchar) possui 8 bits com isso podemos usar os bits mais significatvos de uma imagem e adicionalos nos bits menos significativos de outra.

=== Codificar

Foi implementado um algorítmo que recebe 2 imagem, uma imagem portadora e uma a ser escondida, ao executar introzuimos parte de uma imagem na outra.

[source,cpp]
----
include::U1/CH10 - Decomposicao de imagens em planos de bits/codificar/codificar.cpp[]
----

[#img-codificar]
.Image codificada
image::U1/CH10 - Decomposicao de imagens em planos de bits/codificar/build/esteganografia.png[Resultado]

=== Decodificar

Foi implementado um algoritmo que retira os bits menos significativos e repoem em uma outra imagem como os bits mais significativos decodificando a imagem que foi anteriormente imbutuda

[source,cpp]
----
include::U1/CH10 - Decomposicao de imagens em planos de bits/decodificar/recup_img.cpp[]
----
[#img-decodificar]
.Imagem decodificada de um desafio
image::U1/CH10 - Decomposicao de imagens em planos de bits/decodificar/decodificada.png[Resultado]


== Capitulo 11 - Preenchendo regiões

Nessa seção aprendemos sobre o algorítmo _floodfill_, usado para preencher regiões, e o aplicamos em um programa que contabiliza as bolhas e as bolas brancas em uma imagem de fundo preto.

[source,cpp]
----
include::U1/CH11 - Preenchendo regioes/fillLocals.cpp[]
----

[#img-labeling]
.Etapas da execução e resultado do programa fillLocals.cpp
image::U1/CH11 - Preenchendo regioes/labeling.png[Resultado]



== Capitulo 16 - Tranformada Discreta de Fourier

Nesta seção, abordamos o tópico 'Tranformada Discreta de Fourier', explorando conceitos e implementações relacionados a ele. Abaixo estão os exercícios e resultados obtidos.


[source,cpp]
----
include::./U2/CH16 - Tranformada Discreta de Fourier/dft.cpp[]
----

[#img-teste]
.Imagem de teste
image::./U2/CH16 - Tranformada Discreta de Fourier/teste.png[Resultado]

[#img-espectro_fase]
.Espectro de fase
image::./U2/CH16 - Tranformada Discreta de Fourier/espectro_fase.png[Resultado]

[#img-espectro_magnitude]
.Espectro de magnitude
image::./U2/CH16 - Tranformada Discreta de Fourier/espectro_magnitude.png[Resultado]


== Capitulo 19 - Deteccao de bordas com o algoritmo de Canny

Nesta seção, abordamos o tópico 'Deteccao de bordas com o algoritmo de Canny', explorando conceitos e implementações relacionados a ele. Abaixo estão os exercícios e resultados obtidos.


[source,cpp]
----
include::./U2/CH19 - Deteccao de bordas com o algoritmo de Canny/kmeans.cpp[]
----


[#img-imagem]
.Imagem usada para os testes
image::./U2/CH19 - Deteccao de bordas com o algoritmo de Canny/imagem.jpg[]

[#img-pontos]
.Imagem de pontos
image::./U2/CH19 - Deteccao de bordas com o algoritmo de Canny/pontos.jpg[Resultado]

[#img-pontilhismo_canny]
.Imagem de pontos usando canny
image::./U2/CH19 - Deteccao de bordas com o algoritmo de Canny/pontilhismo_canny.jpg[Resultado]


== Capitulo 20 - Quantizacao vetorial com k-means

Nesta seção, abordamos o tópico 'Quantizacao vetorial com k-means', explorando conceitos e implementações relacionados a ele. Abaixo estão os exercícios e resultados obtidos.


[#img-sushi-color]
image::./U2/CH20 - Quantizacao vetorial com k-means/sushi-color.png[Resultado]


[source,cpp]
----
include::./U2/CH20 - Quantizacao vetorial com k-means/quantizar.cpp[]
----


O resultado podemos juntar as imagems e fazer um gif animado.
[#img-gif]
image::U2/CH20 - Quantizacao vetorial com k-means/saida/merged.gif[Resultado]


:!sectnums: